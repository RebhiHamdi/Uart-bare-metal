
Uart_rxtx_struct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001344  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080014e4  080014e4  000114e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001568  08001568  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001568  08001568  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001568  08001568  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001568  08001568  00011568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800156c  0800156c  0001156c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015cc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015cc  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000cbd  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000420  00000000  00000000  00020d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000140  00000000  00000000  000211b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000de  00000000  00000000  000212f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002a1b  00000000  00000000  000213ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000013b8  00000000  00000000  00023de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b95  00000000  00000000  000251a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bb4  00000000  00000000  0002ed38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0002f8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014cc 	.word	0x080014cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014cc 	.word	0x080014cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
void USART2_WRITE( int ch );
int __io_putchar(int ch);
char usart2_read(void);


int main(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	usart2_rxtx_init();
 8000284:	f000 f84e 	bl	8000324 <usart2_rxtx_init>
	//char key;
		while(1) {

			key = usart2_read();
 8000288:	f000 f906 	bl	8000498 <usart2_read>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <main+0x80>)
 8000292:	701a      	strb	r2, [r3, #0]

			switch (key) {
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <main+0x80>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3b31      	subs	r3, #49	; 0x31
 800029a:	2b06      	cmp	r3, #6
 800029c:	d82c      	bhi.n	80002f8 <main+0x78>
 800029e:	a201      	add	r2, pc, #4	; (adr r2, 80002a4 <main+0x24>)
 80002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a4:	080002c1 	.word	0x080002c1
 80002a8:	080002c9 	.word	0x080002c9
 80002ac:	080002d1 	.word	0x080002d1
 80002b0:	080002d9 	.word	0x080002d9
 80002b4:	080002e1 	.word	0x080002e1
 80002b8:	080002e9 	.word	0x080002e9
 80002bc:	080002f1 	.word	0x080002f1
			    case '1':
			        printf("lundi\n\r");
 80002c0:	4810      	ldr	r0, [pc, #64]	; (8000304 <main+0x84>)
 80002c2:	f000 fa8d 	bl	80007e0 <iprintf>
			        break;
 80002c6:	e01a      	b.n	80002fe <main+0x7e>
			    case '2':
			        printf("mardi\n\r");
 80002c8:	480f      	ldr	r0, [pc, #60]	; (8000308 <main+0x88>)
 80002ca:	f000 fa89 	bl	80007e0 <iprintf>
			        break;
 80002ce:	e016      	b.n	80002fe <main+0x7e>
			    case '3':
			        printf("mercredi\n\r");
 80002d0:	480e      	ldr	r0, [pc, #56]	; (800030c <main+0x8c>)
 80002d2:	f000 fa85 	bl	80007e0 <iprintf>
			        break;
 80002d6:	e012      	b.n	80002fe <main+0x7e>
			    case '4':
			        printf("jeudi\n\r");
 80002d8:	480d      	ldr	r0, [pc, #52]	; (8000310 <main+0x90>)
 80002da:	f000 fa81 	bl	80007e0 <iprintf>
			        break;
 80002de:	e00e      	b.n	80002fe <main+0x7e>
			    case '5':
			        printf("vendredi\n\r");
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <main+0x94>)
 80002e2:	f000 fa7d 	bl	80007e0 <iprintf>
			        break;
 80002e6:	e00a      	b.n	80002fe <main+0x7e>
			    case '6':
			        printf("samedi\n\r");
 80002e8:	480b      	ldr	r0, [pc, #44]	; (8000318 <main+0x98>)
 80002ea:	f000 fa79 	bl	80007e0 <iprintf>
			        break;
 80002ee:	e006      	b.n	80002fe <main+0x7e>
			    case '7':
			        printf("dimanche\n\r");
 80002f0:	480a      	ldr	r0, [pc, #40]	; (800031c <main+0x9c>)
 80002f2:	f000 fa75 	bl	80007e0 <iprintf>
			        break;
 80002f6:	e002      	b.n	80002fe <main+0x7e>
			    default :
			    	printf("Eror\n\r");
 80002f8:	4809      	ldr	r0, [pc, #36]	; (8000320 <main+0xa0>)
 80002fa:	f000 fa71 	bl	80007e0 <iprintf>
			key = usart2_read();
 80002fe:	e7c3      	b.n	8000288 <main+0x8>
 8000300:	20000078 	.word	0x20000078
 8000304:	080014e4 	.word	0x080014e4
 8000308:	080014ec 	.word	0x080014ec
 800030c:	080014f4 	.word	0x080014f4
 8000310:	08001500 	.word	0x08001500
 8000314:	08001508 	.word	0x08001508
 8000318:	08001514 	.word	0x08001514
 800031c:	08001520 	.word	0x08001520
 8000320:	0800152c 	.word	0x0800152c

08000324 <usart2_rxtx_init>:

 }
}


void usart2_rxtx_init(void) {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0

		/***************** Configuration UART gpio pin ***************************/

		/* 1- Enable clock access to gpioa */

			RCC -> AHB1ENR |=  GPIOA_EN;
 8000328:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <usart2_rxtx_init+0xd0>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a31      	ldr	r2, [pc, #196]	; (80003f4 <usart2_rxtx_init+0xd0>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6313      	str	r3, [r2, #48]	; 0x30

		/* 2- Set PA2 mode to Alternate function */

			GPIOA -> MODER |= (1U << 5);
 8000334:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a2f      	ldr	r2, [pc, #188]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800033a:	f043 0320 	orr.w	r3, r3, #32
 800033e:	6013      	str	r3, [r2, #0]
			GPIOA -> MODER &= ~(1U << 4);
 8000340:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a2c      	ldr	r2, [pc, #176]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000346:	f023 0310 	bic.w	r3, r3, #16
 800034a:	6013      	str	r3, [r2, #0]

		/* 3- Set PA2 alternate function type to AP07 */

			GPIOA -> AFR[0] |= (1U << 8);
 800034c:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800034e:	6a1b      	ldr	r3, [r3, #32]
 8000350:	4a29      	ldr	r2, [pc, #164]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000356:	6213      	str	r3, [r2, #32]
			GPIOA -> AFR[0] |= (1U << 9);
 8000358:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800035a:	6a1b      	ldr	r3, [r3, #32]
 800035c:	4a26      	ldr	r2, [pc, #152]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800035e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000362:	6213      	str	r3, [r2, #32]
			GPIOA -> AFR[0] |= (1U << 10);
 8000364:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a23      	ldr	r2, [pc, #140]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800036a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800036e:	6213      	str	r3, [r2, #32]
			GPIOA -> AFR[0] &= ~(1U << 11);
 8000370:	4b21      	ldr	r3, [pc, #132]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800037a:	6213      	str	r3, [r2, #32]


		/* 4- Set PA3 mode to Alternate function */

			GPIOA -> MODER |= (1U << 7);
 800037c:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a1d      	ldr	r2, [pc, #116]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000386:	6013      	str	r3, [r2, #0]
			GPIOA -> MODER &= ~(1U << 6);
 8000388:	4b1b      	ldr	r3, [pc, #108]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a1a      	ldr	r2, [pc, #104]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800038e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000392:	6013      	str	r3, [r2, #0]

		/* 5- Set PA3 alternate function type to AP07 */

			GPIOA -> AFR[0] |= (1U << 12);
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <usart2_rxtx_init+0xd4>)
 8000396:	6a1b      	ldr	r3, [r3, #32]
 8000398:	4a17      	ldr	r2, [pc, #92]	; (80003f8 <usart2_rxtx_init+0xd4>)
 800039a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800039e:	6213      	str	r3, [r2, #32]
			GPIOA -> AFR[0] |= (1U << 13);
 80003a0:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <usart2_rxtx_init+0xd4>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <usart2_rxtx_init+0xd4>)
 80003a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003aa:	6213      	str	r3, [r2, #32]
			GPIOA -> AFR[0] |= (1U << 14);
 80003ac:	4b12      	ldr	r3, [pc, #72]	; (80003f8 <usart2_rxtx_init+0xd4>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a11      	ldr	r2, [pc, #68]	; (80003f8 <usart2_rxtx_init+0xd4>)
 80003b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b6:	6213      	str	r3, [r2, #32]
			GPIOA -> AFR[0] &= ~(1U << 15);
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <usart2_rxtx_init+0xd4>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <usart2_rxtx_init+0xd4>)
 80003be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80003c2:	6213      	str	r3, [r2, #32]

		/**************** Configuratioin UART baudrate *************************/

	    /* 1- Enable clock access to uart2 */

			RCC -> APB1ENR |= USART2_EN;
 80003c4:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <usart2_rxtx_init+0xd0>)
 80003c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c8:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <usart2_rxtx_init+0xd0>)
 80003ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ce:	6413      	str	r3, [r2, #64]	; 0x40

		/* 2- Configure Uart baudrate */

			uart_set_baudrate(USART2, Periph_CLK, Uart_BaudRate);
 80003d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003d4:	4909      	ldr	r1, [pc, #36]	; (80003fc <usart2_rxtx_init+0xd8>)
 80003d6:	480a      	ldr	r0, [pc, #40]	; (8000400 <usart2_rxtx_init+0xdc>)
 80003d8:	f000 f820 	bl	800041c <uart_set_baudrate>

		/* 3- Configure uart transfert direction */

			USART2 -> CR1 = (CR1_TE | CR1_RE);
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <usart2_rxtx_init+0xdc>)
 80003de:	220c      	movs	r2, #12
 80003e0:	60da      	str	r2, [r3, #12]

		/* 4- Enable uart module */

			USART2 -> CR1 |= CR1_UE;
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <usart2_rxtx_init+0xdc>)
 80003e4:	68db      	ldr	r3, [r3, #12]
 80003e6:	4a06      	ldr	r2, [pc, #24]	; (8000400 <usart2_rxtx_init+0xdc>)
 80003e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ec:	60d3      	str	r3, [r2, #12]


}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020000 	.word	0x40020000
 80003fc:	00f42400 	.word	0x00f42400
 8000400:	40004400 	.word	0x40004400

08000404 <__io_putchar>:

int __io_putchar(int ch) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]

	USART2_WRITE(ch);
 800040c:	6878      	ldr	r0, [r7, #4]
 800040e:	f000 f82b 	bl	8000468 <USART2_WRITE>
	return ch;
 8000412:	687b      	ldr	r3, [r7, #4]

}
 8000414:	4618      	mov	r0, r3
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <uart_set_baudrate>:

static void uart_set_baudrate (USART_TypeDef *USARTx, uint32_t Pheriphclk, uint32_t Baudrate ) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]

	USARTx -> BRR = compute_uart_bd(Pheriphclk, Baudrate);
 8000428:	6879      	ldr	r1, [r7, #4]
 800042a:	68b8      	ldr	r0, [r7, #8]
 800042c:	f000 f808 	bl	8000440 <compute_uart_bd>
 8000430:	4603      	mov	r3, r0
 8000432:	461a      	mov	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	609a      	str	r2, [r3, #8]

}
 8000438:	bf00      	nop
 800043a:	3710      	adds	r7, #16
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}

08000440 <compute_uart_bd>:



static uint16_t compute_uart_bd ( uint32_t Pheriphclk, uint32_t Baudrate ) {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	6039      	str	r1, [r7, #0]

	return ( ( Pheriphclk + ( Baudrate / 2U ) ) / Baudrate );
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	085a      	lsrs	r2, r3, #1
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	441a      	add	r2, r3
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	fbb2 f3f3 	udiv	r3, r2, r3
 8000458:	b29b      	uxth	r3, r3

}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
	...

08000468 <USART2_WRITE>:


void USART2_WRITE( int ch ) {
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]

	/* Make sure the transmit data is empty */

	   while (!( USART2 -> SR & SR_TXE )) {}
 8000470:	bf00      	nop
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <USART2_WRITE+0x2c>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <USART2_WRITE+0xa>

	/*write to transmit data register */

	    USART2 -> DR = (ch & 0xFF);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <USART2_WRITE+0x2c>)
 8000482:	b2db      	uxtb	r3, r3
 8000484:	6053      	str	r3, [r2, #4]
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40004400 	.word	0x40004400

08000498 <usart2_read>:


char usart2_read(void) {
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

	/* 1- Make sure the receive data register is not empty */

	while(!(USART2 -> SR & SR_RXNE)){}
 800049c:	bf00      	nop
 800049e:	4b07      	ldr	r3, [pc, #28]	; (80004bc <usart2_read+0x24>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f003 0320 	and.w	r3, r3, #32
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f9      	beq.n	800049e <usart2_read+0x6>

	/* 2- Read Data */

	return USART2 -> DR;
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <usart2_read+0x24>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	b2db      	uxtb	r3, r3


}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40004400 	.word	0x40004400

080004c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
 80004d0:	e00a      	b.n	80004e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004d2:	f3af 8000 	nop.w
 80004d6:	4601      	mov	r1, r0
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	1c5a      	adds	r2, r3, #1
 80004dc:	60ba      	str	r2, [r7, #8]
 80004de:	b2ca      	uxtb	r2, r1
 80004e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	3301      	adds	r3, #1
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	697a      	ldr	r2, [r7, #20]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbf0      	blt.n	80004d2 <_read+0x12>
  }

  return len;
 80004f0:	687b      	ldr	r3, [r7, #4]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b086      	sub	sp, #24
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	e009      	b.n	8000520 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff75 	bl	8000404 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	3301      	adds	r3, #1
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	429a      	cmp	r2, r3
 8000526:	dbf1      	blt.n	800050c <_write+0x12>
  }
  return len;
 8000528:	687b      	ldr	r3, [r7, #4]
}
 800052a:	4618      	mov	r0, r3
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <_close>:

int _close(int file)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800055a:	605a      	str	r2, [r3, #4]
  return 0;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <_isatty>:

int _isatty(int file)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000572:	2301      	movs	r3, #1
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
	...

0800059c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <_sbrk+0x5c>)
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <_sbrk+0x60>)
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <_sbrk+0x64>)
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <_sbrk+0x68>)
 80005bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <_sbrk+0x64>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4413      	add	r3, r2
 80005c6:	693a      	ldr	r2, [r7, #16]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d207      	bcs.n	80005dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005cc:	f000 f9ac 	bl	8000928 <__errno>
 80005d0:	4603      	mov	r3, r0
 80005d2:	220c      	movs	r2, #12
 80005d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	e009      	b.n	80005f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <_sbrk+0x64>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	4a05      	ldr	r2, [pc, #20]	; (8000600 <_sbrk+0x64>)
 80005ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20018000 	.word	0x20018000
 80005fc:	00000400 	.word	0x00000400
 8000600:	2000007c 	.word	0x2000007c
 8000604:	200001d0 	.word	0x200001d0

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f000 f97d 	bl	8000934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fe21 	bl	8000280 <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800064c:	08001570 	.word	0x08001570
  ldr r2, =_sbss
 8000650:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000654:	200001cc 	.word	0x200001cc

08000658 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <ADC_IRQHandler>
	...

0800065c <std>:
 800065c:	2300      	movs	r3, #0
 800065e:	b510      	push	{r4, lr}
 8000660:	4604      	mov	r4, r0
 8000662:	e9c0 3300 	strd	r3, r3, [r0]
 8000666:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800066a:	6083      	str	r3, [r0, #8]
 800066c:	8181      	strh	r1, [r0, #12]
 800066e:	6643      	str	r3, [r0, #100]	; 0x64
 8000670:	81c2      	strh	r2, [r0, #14]
 8000672:	6183      	str	r3, [r0, #24]
 8000674:	4619      	mov	r1, r3
 8000676:	2208      	movs	r2, #8
 8000678:	305c      	adds	r0, #92	; 0x5c
 800067a:	f000 f906 	bl	800088a <memset>
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <std+0x58>)
 8000680:	6263      	str	r3, [r4, #36]	; 0x24
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <std+0x5c>)
 8000684:	62a3      	str	r3, [r4, #40]	; 0x28
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <std+0x60>)
 8000688:	62e3      	str	r3, [r4, #44]	; 0x2c
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <std+0x64>)
 800068c:	6323      	str	r3, [r4, #48]	; 0x30
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <std+0x68>)
 8000690:	6224      	str	r4, [r4, #32]
 8000692:	429c      	cmp	r4, r3
 8000694:	d006      	beq.n	80006a4 <std+0x48>
 8000696:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800069a:	4294      	cmp	r4, r2
 800069c:	d002      	beq.n	80006a4 <std+0x48>
 800069e:	33d0      	adds	r3, #208	; 0xd0
 80006a0:	429c      	cmp	r4, r3
 80006a2:	d105      	bne.n	80006b0 <std+0x54>
 80006a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80006a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ac:	f000 b966 	b.w	800097c <__retarget_lock_init_recursive>
 80006b0:	bd10      	pop	{r4, pc}
 80006b2:	bf00      	nop
 80006b4:	08000805 	.word	0x08000805
 80006b8:	08000827 	.word	0x08000827
 80006bc:	0800085f 	.word	0x0800085f
 80006c0:	08000883 	.word	0x08000883
 80006c4:	20000080 	.word	0x20000080

080006c8 <stdio_exit_handler>:
 80006c8:	4a02      	ldr	r2, [pc, #8]	; (80006d4 <stdio_exit_handler+0xc>)
 80006ca:	4903      	ldr	r1, [pc, #12]	; (80006d8 <stdio_exit_handler+0x10>)
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <stdio_exit_handler+0x14>)
 80006ce:	f000 b869 	b.w	80007a4 <_fwalk_sglue>
 80006d2:	bf00      	nop
 80006d4:	20000000 	.word	0x20000000
 80006d8:	08001229 	.word	0x08001229
 80006dc:	2000000c 	.word	0x2000000c

080006e0 <cleanup_stdio>:
 80006e0:	6841      	ldr	r1, [r0, #4]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <cleanup_stdio+0x34>)
 80006e4:	4299      	cmp	r1, r3
 80006e6:	b510      	push	{r4, lr}
 80006e8:	4604      	mov	r4, r0
 80006ea:	d001      	beq.n	80006f0 <cleanup_stdio+0x10>
 80006ec:	f000 fd9c 	bl	8001228 <_fflush_r>
 80006f0:	68a1      	ldr	r1, [r4, #8]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <cleanup_stdio+0x38>)
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d002      	beq.n	80006fe <cleanup_stdio+0x1e>
 80006f8:	4620      	mov	r0, r4
 80006fa:	f000 fd95 	bl	8001228 <_fflush_r>
 80006fe:	68e1      	ldr	r1, [r4, #12]
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <cleanup_stdio+0x3c>)
 8000702:	4299      	cmp	r1, r3
 8000704:	d004      	beq.n	8000710 <cleanup_stdio+0x30>
 8000706:	4620      	mov	r0, r4
 8000708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070c:	f000 bd8c 	b.w	8001228 <_fflush_r>
 8000710:	bd10      	pop	{r4, pc}
 8000712:	bf00      	nop
 8000714:	20000080 	.word	0x20000080
 8000718:	200000e8 	.word	0x200000e8
 800071c:	20000150 	.word	0x20000150

08000720 <global_stdio_init.part.0>:
 8000720:	b510      	push	{r4, lr}
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <global_stdio_init.part.0+0x30>)
 8000724:	4c0b      	ldr	r4, [pc, #44]	; (8000754 <global_stdio_init.part.0+0x34>)
 8000726:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <global_stdio_init.part.0+0x38>)
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	4620      	mov	r0, r4
 800072c:	2200      	movs	r2, #0
 800072e:	2104      	movs	r1, #4
 8000730:	f7ff ff94 	bl	800065c <std>
 8000734:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000738:	2201      	movs	r2, #1
 800073a:	2109      	movs	r1, #9
 800073c:	f7ff ff8e 	bl	800065c <std>
 8000740:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000744:	2202      	movs	r2, #2
 8000746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074a:	2112      	movs	r1, #18
 800074c:	f7ff bf86 	b.w	800065c <std>
 8000750:	200001b8 	.word	0x200001b8
 8000754:	20000080 	.word	0x20000080
 8000758:	080006c9 	.word	0x080006c9

0800075c <__sfp_lock_acquire>:
 800075c:	4801      	ldr	r0, [pc, #4]	; (8000764 <__sfp_lock_acquire+0x8>)
 800075e:	f000 b90e 	b.w	800097e <__retarget_lock_acquire_recursive>
 8000762:	bf00      	nop
 8000764:	200001c1 	.word	0x200001c1

08000768 <__sfp_lock_release>:
 8000768:	4801      	ldr	r0, [pc, #4]	; (8000770 <__sfp_lock_release+0x8>)
 800076a:	f000 b909 	b.w	8000980 <__retarget_lock_release_recursive>
 800076e:	bf00      	nop
 8000770:	200001c1 	.word	0x200001c1

08000774 <__sinit>:
 8000774:	b510      	push	{r4, lr}
 8000776:	4604      	mov	r4, r0
 8000778:	f7ff fff0 	bl	800075c <__sfp_lock_acquire>
 800077c:	6a23      	ldr	r3, [r4, #32]
 800077e:	b11b      	cbz	r3, 8000788 <__sinit+0x14>
 8000780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000784:	f7ff bff0 	b.w	8000768 <__sfp_lock_release>
 8000788:	4b04      	ldr	r3, [pc, #16]	; (800079c <__sinit+0x28>)
 800078a:	6223      	str	r3, [r4, #32]
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__sinit+0x2c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1f5      	bne.n	8000780 <__sinit+0xc>
 8000794:	f7ff ffc4 	bl	8000720 <global_stdio_init.part.0>
 8000798:	e7f2      	b.n	8000780 <__sinit+0xc>
 800079a:	bf00      	nop
 800079c:	080006e1 	.word	0x080006e1
 80007a0:	200001b8 	.word	0x200001b8

080007a4 <_fwalk_sglue>:
 80007a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007a8:	4607      	mov	r7, r0
 80007aa:	4688      	mov	r8, r1
 80007ac:	4614      	mov	r4, r2
 80007ae:	2600      	movs	r6, #0
 80007b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007b4:	f1b9 0901 	subs.w	r9, r9, #1
 80007b8:	d505      	bpl.n	80007c6 <_fwalk_sglue+0x22>
 80007ba:	6824      	ldr	r4, [r4, #0]
 80007bc:	2c00      	cmp	r4, #0
 80007be:	d1f7      	bne.n	80007b0 <_fwalk_sglue+0xc>
 80007c0:	4630      	mov	r0, r6
 80007c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007c6:	89ab      	ldrh	r3, [r5, #12]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d907      	bls.n	80007dc <_fwalk_sglue+0x38>
 80007cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007d0:	3301      	adds	r3, #1
 80007d2:	d003      	beq.n	80007dc <_fwalk_sglue+0x38>
 80007d4:	4629      	mov	r1, r5
 80007d6:	4638      	mov	r0, r7
 80007d8:	47c0      	blx	r8
 80007da:	4306      	orrs	r6, r0
 80007dc:	3568      	adds	r5, #104	; 0x68
 80007de:	e7e9      	b.n	80007b4 <_fwalk_sglue+0x10>

080007e0 <iprintf>:
 80007e0:	b40f      	push	{r0, r1, r2, r3}
 80007e2:	b507      	push	{r0, r1, r2, lr}
 80007e4:	4906      	ldr	r1, [pc, #24]	; (8000800 <iprintf+0x20>)
 80007e6:	ab04      	add	r3, sp, #16
 80007e8:	6808      	ldr	r0, [r1, #0]
 80007ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80007ee:	6881      	ldr	r1, [r0, #8]
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	f000 f9e9 	bl	8000bc8 <_vfiprintf_r>
 80007f6:	b003      	add	sp, #12
 80007f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80007fc:	b004      	add	sp, #16
 80007fe:	4770      	bx	lr
 8000800:	20000058 	.word	0x20000058

08000804 <__sread>:
 8000804:	b510      	push	{r4, lr}
 8000806:	460c      	mov	r4, r1
 8000808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800080c:	f000 f868 	bl	80008e0 <_read_r>
 8000810:	2800      	cmp	r0, #0
 8000812:	bfab      	itete	ge
 8000814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000816:	89a3      	ldrhlt	r3, [r4, #12]
 8000818:	181b      	addge	r3, r3, r0
 800081a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800081e:	bfac      	ite	ge
 8000820:	6563      	strge	r3, [r4, #84]	; 0x54
 8000822:	81a3      	strhlt	r3, [r4, #12]
 8000824:	bd10      	pop	{r4, pc}

08000826 <__swrite>:
 8000826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800082a:	461f      	mov	r7, r3
 800082c:	898b      	ldrh	r3, [r1, #12]
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	4605      	mov	r5, r0
 8000832:	460c      	mov	r4, r1
 8000834:	4616      	mov	r6, r2
 8000836:	d505      	bpl.n	8000844 <__swrite+0x1e>
 8000838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083c:	2302      	movs	r3, #2
 800083e:	2200      	movs	r2, #0
 8000840:	f000 f83c 	bl	80008bc <_lseek_r>
 8000844:	89a3      	ldrh	r3, [r4, #12]
 8000846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800084a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800084e:	81a3      	strh	r3, [r4, #12]
 8000850:	4632      	mov	r2, r6
 8000852:	463b      	mov	r3, r7
 8000854:	4628      	mov	r0, r5
 8000856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800085a:	f000 b853 	b.w	8000904 <_write_r>

0800085e <__sseek>:
 800085e:	b510      	push	{r4, lr}
 8000860:	460c      	mov	r4, r1
 8000862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000866:	f000 f829 	bl	80008bc <_lseek_r>
 800086a:	1c43      	adds	r3, r0, #1
 800086c:	89a3      	ldrh	r3, [r4, #12]
 800086e:	bf15      	itete	ne
 8000870:	6560      	strne	r0, [r4, #84]	; 0x54
 8000872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800087a:	81a3      	strheq	r3, [r4, #12]
 800087c:	bf18      	it	ne
 800087e:	81a3      	strhne	r3, [r4, #12]
 8000880:	bd10      	pop	{r4, pc}

08000882 <__sclose>:
 8000882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000886:	f000 b809 	b.w	800089c <_close_r>

0800088a <memset>:
 800088a:	4402      	add	r2, r0
 800088c:	4603      	mov	r3, r0
 800088e:	4293      	cmp	r3, r2
 8000890:	d100      	bne.n	8000894 <memset+0xa>
 8000892:	4770      	bx	lr
 8000894:	f803 1b01 	strb.w	r1, [r3], #1
 8000898:	e7f9      	b.n	800088e <memset+0x4>
	...

0800089c <_close_r>:
 800089c:	b538      	push	{r3, r4, r5, lr}
 800089e:	4d06      	ldr	r5, [pc, #24]	; (80008b8 <_close_r+0x1c>)
 80008a0:	2300      	movs	r3, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	602b      	str	r3, [r5, #0]
 80008a8:	f7ff fe43 	bl	8000532 <_close>
 80008ac:	1c43      	adds	r3, r0, #1
 80008ae:	d102      	bne.n	80008b6 <_close_r+0x1a>
 80008b0:	682b      	ldr	r3, [r5, #0]
 80008b2:	b103      	cbz	r3, 80008b6 <_close_r+0x1a>
 80008b4:	6023      	str	r3, [r4, #0]
 80008b6:	bd38      	pop	{r3, r4, r5, pc}
 80008b8:	200001bc 	.word	0x200001bc

080008bc <_lseek_r>:
 80008bc:	b538      	push	{r3, r4, r5, lr}
 80008be:	4d07      	ldr	r5, [pc, #28]	; (80008dc <_lseek_r+0x20>)
 80008c0:	4604      	mov	r4, r0
 80008c2:	4608      	mov	r0, r1
 80008c4:	4611      	mov	r1, r2
 80008c6:	2200      	movs	r2, #0
 80008c8:	602a      	str	r2, [r5, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	f7ff fe58 	bl	8000580 <_lseek>
 80008d0:	1c43      	adds	r3, r0, #1
 80008d2:	d102      	bne.n	80008da <_lseek_r+0x1e>
 80008d4:	682b      	ldr	r3, [r5, #0]
 80008d6:	b103      	cbz	r3, 80008da <_lseek_r+0x1e>
 80008d8:	6023      	str	r3, [r4, #0]
 80008da:	bd38      	pop	{r3, r4, r5, pc}
 80008dc:	200001bc 	.word	0x200001bc

080008e0 <_read_r>:
 80008e0:	b538      	push	{r3, r4, r5, lr}
 80008e2:	4d07      	ldr	r5, [pc, #28]	; (8000900 <_read_r+0x20>)
 80008e4:	4604      	mov	r4, r0
 80008e6:	4608      	mov	r0, r1
 80008e8:	4611      	mov	r1, r2
 80008ea:	2200      	movs	r2, #0
 80008ec:	602a      	str	r2, [r5, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	f7ff fde6 	bl	80004c0 <_read>
 80008f4:	1c43      	adds	r3, r0, #1
 80008f6:	d102      	bne.n	80008fe <_read_r+0x1e>
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	b103      	cbz	r3, 80008fe <_read_r+0x1e>
 80008fc:	6023      	str	r3, [r4, #0]
 80008fe:	bd38      	pop	{r3, r4, r5, pc}
 8000900:	200001bc 	.word	0x200001bc

08000904 <_write_r>:
 8000904:	b538      	push	{r3, r4, r5, lr}
 8000906:	4d07      	ldr	r5, [pc, #28]	; (8000924 <_write_r+0x20>)
 8000908:	4604      	mov	r4, r0
 800090a:	4608      	mov	r0, r1
 800090c:	4611      	mov	r1, r2
 800090e:	2200      	movs	r2, #0
 8000910:	602a      	str	r2, [r5, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	f7ff fdf1 	bl	80004fa <_write>
 8000918:	1c43      	adds	r3, r0, #1
 800091a:	d102      	bne.n	8000922 <_write_r+0x1e>
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	b103      	cbz	r3, 8000922 <_write_r+0x1e>
 8000920:	6023      	str	r3, [r4, #0]
 8000922:	bd38      	pop	{r3, r4, r5, pc}
 8000924:	200001bc 	.word	0x200001bc

08000928 <__errno>:
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <__errno+0x8>)
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000058 	.word	0x20000058

08000934 <__libc_init_array>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4d0d      	ldr	r5, [pc, #52]	; (800096c <__libc_init_array+0x38>)
 8000938:	4c0d      	ldr	r4, [pc, #52]	; (8000970 <__libc_init_array+0x3c>)
 800093a:	1b64      	subs	r4, r4, r5
 800093c:	10a4      	asrs	r4, r4, #2
 800093e:	2600      	movs	r6, #0
 8000940:	42a6      	cmp	r6, r4
 8000942:	d109      	bne.n	8000958 <__libc_init_array+0x24>
 8000944:	4d0b      	ldr	r5, [pc, #44]	; (8000974 <__libc_init_array+0x40>)
 8000946:	4c0c      	ldr	r4, [pc, #48]	; (8000978 <__libc_init_array+0x44>)
 8000948:	f000 fdc0 	bl	80014cc <_init>
 800094c:	1b64      	subs	r4, r4, r5
 800094e:	10a4      	asrs	r4, r4, #2
 8000950:	2600      	movs	r6, #0
 8000952:	42a6      	cmp	r6, r4
 8000954:	d105      	bne.n	8000962 <__libc_init_array+0x2e>
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f855 3b04 	ldr.w	r3, [r5], #4
 800095c:	4798      	blx	r3
 800095e:	3601      	adds	r6, #1
 8000960:	e7ee      	b.n	8000940 <__libc_init_array+0xc>
 8000962:	f855 3b04 	ldr.w	r3, [r5], #4
 8000966:	4798      	blx	r3
 8000968:	3601      	adds	r6, #1
 800096a:	e7f2      	b.n	8000952 <__libc_init_array+0x1e>
 800096c:	08001568 	.word	0x08001568
 8000970:	08001568 	.word	0x08001568
 8000974:	08001568 	.word	0x08001568
 8000978:	0800156c 	.word	0x0800156c

0800097c <__retarget_lock_init_recursive>:
 800097c:	4770      	bx	lr

0800097e <__retarget_lock_acquire_recursive>:
 800097e:	4770      	bx	lr

08000980 <__retarget_lock_release_recursive>:
 8000980:	4770      	bx	lr
	...

08000984 <_free_r>:
 8000984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000986:	2900      	cmp	r1, #0
 8000988:	d044      	beq.n	8000a14 <_free_r+0x90>
 800098a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800098e:	9001      	str	r0, [sp, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	f1a1 0404 	sub.w	r4, r1, #4
 8000996:	bfb8      	it	lt
 8000998:	18e4      	addlt	r4, r4, r3
 800099a:	f000 f8df 	bl	8000b5c <__malloc_lock>
 800099e:	4a1e      	ldr	r2, [pc, #120]	; (8000a18 <_free_r+0x94>)
 80009a0:	9801      	ldr	r0, [sp, #4]
 80009a2:	6813      	ldr	r3, [r2, #0]
 80009a4:	b933      	cbnz	r3, 80009b4 <_free_r+0x30>
 80009a6:	6063      	str	r3, [r4, #4]
 80009a8:	6014      	str	r4, [r2, #0]
 80009aa:	b003      	add	sp, #12
 80009ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80009b0:	f000 b8da 	b.w	8000b68 <__malloc_unlock>
 80009b4:	42a3      	cmp	r3, r4
 80009b6:	d908      	bls.n	80009ca <_free_r+0x46>
 80009b8:	6825      	ldr	r5, [r4, #0]
 80009ba:	1961      	adds	r1, r4, r5
 80009bc:	428b      	cmp	r3, r1
 80009be:	bf01      	itttt	eq
 80009c0:	6819      	ldreq	r1, [r3, #0]
 80009c2:	685b      	ldreq	r3, [r3, #4]
 80009c4:	1949      	addeq	r1, r1, r5
 80009c6:	6021      	streq	r1, [r4, #0]
 80009c8:	e7ed      	b.n	80009a6 <_free_r+0x22>
 80009ca:	461a      	mov	r2, r3
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	b10b      	cbz	r3, 80009d4 <_free_r+0x50>
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	d9fa      	bls.n	80009ca <_free_r+0x46>
 80009d4:	6811      	ldr	r1, [r2, #0]
 80009d6:	1855      	adds	r5, r2, r1
 80009d8:	42a5      	cmp	r5, r4
 80009da:	d10b      	bne.n	80009f4 <_free_r+0x70>
 80009dc:	6824      	ldr	r4, [r4, #0]
 80009de:	4421      	add	r1, r4
 80009e0:	1854      	adds	r4, r2, r1
 80009e2:	42a3      	cmp	r3, r4
 80009e4:	6011      	str	r1, [r2, #0]
 80009e6:	d1e0      	bne.n	80009aa <_free_r+0x26>
 80009e8:	681c      	ldr	r4, [r3, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	6053      	str	r3, [r2, #4]
 80009ee:	440c      	add	r4, r1
 80009f0:	6014      	str	r4, [r2, #0]
 80009f2:	e7da      	b.n	80009aa <_free_r+0x26>
 80009f4:	d902      	bls.n	80009fc <_free_r+0x78>
 80009f6:	230c      	movs	r3, #12
 80009f8:	6003      	str	r3, [r0, #0]
 80009fa:	e7d6      	b.n	80009aa <_free_r+0x26>
 80009fc:	6825      	ldr	r5, [r4, #0]
 80009fe:	1961      	adds	r1, r4, r5
 8000a00:	428b      	cmp	r3, r1
 8000a02:	bf04      	itt	eq
 8000a04:	6819      	ldreq	r1, [r3, #0]
 8000a06:	685b      	ldreq	r3, [r3, #4]
 8000a08:	6063      	str	r3, [r4, #4]
 8000a0a:	bf04      	itt	eq
 8000a0c:	1949      	addeq	r1, r1, r5
 8000a0e:	6021      	streq	r1, [r4, #0]
 8000a10:	6054      	str	r4, [r2, #4]
 8000a12:	e7ca      	b.n	80009aa <_free_r+0x26>
 8000a14:	b003      	add	sp, #12
 8000a16:	bd30      	pop	{r4, r5, pc}
 8000a18:	200001c4 	.word	0x200001c4

08000a1c <sbrk_aligned>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	4e0e      	ldr	r6, [pc, #56]	; (8000a58 <sbrk_aligned+0x3c>)
 8000a20:	460c      	mov	r4, r1
 8000a22:	6831      	ldr	r1, [r6, #0]
 8000a24:	4605      	mov	r5, r0
 8000a26:	b911      	cbnz	r1, 8000a2e <sbrk_aligned+0x12>
 8000a28:	f000 fcbc 	bl	80013a4 <_sbrk_r>
 8000a2c:	6030      	str	r0, [r6, #0]
 8000a2e:	4621      	mov	r1, r4
 8000a30:	4628      	mov	r0, r5
 8000a32:	f000 fcb7 	bl	80013a4 <_sbrk_r>
 8000a36:	1c43      	adds	r3, r0, #1
 8000a38:	d00a      	beq.n	8000a50 <sbrk_aligned+0x34>
 8000a3a:	1cc4      	adds	r4, r0, #3
 8000a3c:	f024 0403 	bic.w	r4, r4, #3
 8000a40:	42a0      	cmp	r0, r4
 8000a42:	d007      	beq.n	8000a54 <sbrk_aligned+0x38>
 8000a44:	1a21      	subs	r1, r4, r0
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 fcac 	bl	80013a4 <_sbrk_r>
 8000a4c:	3001      	adds	r0, #1
 8000a4e:	d101      	bne.n	8000a54 <sbrk_aligned+0x38>
 8000a50:	f04f 34ff 	mov.w	r4, #4294967295
 8000a54:	4620      	mov	r0, r4
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	200001c8 	.word	0x200001c8

08000a5c <_malloc_r>:
 8000a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a60:	1ccd      	adds	r5, r1, #3
 8000a62:	f025 0503 	bic.w	r5, r5, #3
 8000a66:	3508      	adds	r5, #8
 8000a68:	2d0c      	cmp	r5, #12
 8000a6a:	bf38      	it	cc
 8000a6c:	250c      	movcc	r5, #12
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	4607      	mov	r7, r0
 8000a72:	db01      	blt.n	8000a78 <_malloc_r+0x1c>
 8000a74:	42a9      	cmp	r1, r5
 8000a76:	d905      	bls.n	8000a84 <_malloc_r+0x28>
 8000a78:	230c      	movs	r3, #12
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	4630      	mov	r0, r6
 8000a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000b58 <_malloc_r+0xfc>
 8000a88:	f000 f868 	bl	8000b5c <__malloc_lock>
 8000a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000a90:	461c      	mov	r4, r3
 8000a92:	bb5c      	cbnz	r4, 8000aec <_malloc_r+0x90>
 8000a94:	4629      	mov	r1, r5
 8000a96:	4638      	mov	r0, r7
 8000a98:	f7ff ffc0 	bl	8000a1c <sbrk_aligned>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	d155      	bne.n	8000b4e <_malloc_r+0xf2>
 8000aa2:	f8d8 4000 	ldr.w	r4, [r8]
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d145      	bne.n	8000b38 <_malloc_r+0xdc>
 8000aac:	2c00      	cmp	r4, #0
 8000aae:	d048      	beq.n	8000b42 <_malloc_r+0xe6>
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	4631      	mov	r1, r6
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	eb04 0903 	add.w	r9, r4, r3
 8000aba:	f000 fc73 	bl	80013a4 <_sbrk_r>
 8000abe:	4581      	cmp	r9, r0
 8000ac0:	d13f      	bne.n	8000b42 <_malloc_r+0xe6>
 8000ac2:	6821      	ldr	r1, [r4, #0]
 8000ac4:	1a6d      	subs	r5, r5, r1
 8000ac6:	4629      	mov	r1, r5
 8000ac8:	4638      	mov	r0, r7
 8000aca:	f7ff ffa7 	bl	8000a1c <sbrk_aligned>
 8000ace:	3001      	adds	r0, #1
 8000ad0:	d037      	beq.n	8000b42 <_malloc_r+0xe6>
 8000ad2:	6823      	ldr	r3, [r4, #0]
 8000ad4:	442b      	add	r3, r5
 8000ad6:	6023      	str	r3, [r4, #0]
 8000ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d038      	beq.n	8000b52 <_malloc_r+0xf6>
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	42a2      	cmp	r2, r4
 8000ae4:	d12b      	bne.n	8000b3e <_malloc_r+0xe2>
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	e00f      	b.n	8000b0c <_malloc_r+0xb0>
 8000aec:	6822      	ldr	r2, [r4, #0]
 8000aee:	1b52      	subs	r2, r2, r5
 8000af0:	d41f      	bmi.n	8000b32 <_malloc_r+0xd6>
 8000af2:	2a0b      	cmp	r2, #11
 8000af4:	d917      	bls.n	8000b26 <_malloc_r+0xca>
 8000af6:	1961      	adds	r1, r4, r5
 8000af8:	42a3      	cmp	r3, r4
 8000afa:	6025      	str	r5, [r4, #0]
 8000afc:	bf18      	it	ne
 8000afe:	6059      	strne	r1, [r3, #4]
 8000b00:	6863      	ldr	r3, [r4, #4]
 8000b02:	bf08      	it	eq
 8000b04:	f8c8 1000 	streq.w	r1, [r8]
 8000b08:	5162      	str	r2, [r4, r5]
 8000b0a:	604b      	str	r3, [r1, #4]
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	f104 060b 	add.w	r6, r4, #11
 8000b12:	f000 f829 	bl	8000b68 <__malloc_unlock>
 8000b16:	f026 0607 	bic.w	r6, r6, #7
 8000b1a:	1d23      	adds	r3, r4, #4
 8000b1c:	1af2      	subs	r2, r6, r3
 8000b1e:	d0ae      	beq.n	8000a7e <_malloc_r+0x22>
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	50a3      	str	r3, [r4, r2]
 8000b24:	e7ab      	b.n	8000a7e <_malloc_r+0x22>
 8000b26:	42a3      	cmp	r3, r4
 8000b28:	6862      	ldr	r2, [r4, #4]
 8000b2a:	d1dd      	bne.n	8000ae8 <_malloc_r+0x8c>
 8000b2c:	f8c8 2000 	str.w	r2, [r8]
 8000b30:	e7ec      	b.n	8000b0c <_malloc_r+0xb0>
 8000b32:	4623      	mov	r3, r4
 8000b34:	6864      	ldr	r4, [r4, #4]
 8000b36:	e7ac      	b.n	8000a92 <_malloc_r+0x36>
 8000b38:	4634      	mov	r4, r6
 8000b3a:	6876      	ldr	r6, [r6, #4]
 8000b3c:	e7b4      	b.n	8000aa8 <_malloc_r+0x4c>
 8000b3e:	4613      	mov	r3, r2
 8000b40:	e7cc      	b.n	8000adc <_malloc_r+0x80>
 8000b42:	230c      	movs	r3, #12
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4638      	mov	r0, r7
 8000b48:	f000 f80e 	bl	8000b68 <__malloc_unlock>
 8000b4c:	e797      	b.n	8000a7e <_malloc_r+0x22>
 8000b4e:	6025      	str	r5, [r4, #0]
 8000b50:	e7dc      	b.n	8000b0c <_malloc_r+0xb0>
 8000b52:	605b      	str	r3, [r3, #4]
 8000b54:	deff      	udf	#255	; 0xff
 8000b56:	bf00      	nop
 8000b58:	200001c4 	.word	0x200001c4

08000b5c <__malloc_lock>:
 8000b5c:	4801      	ldr	r0, [pc, #4]	; (8000b64 <__malloc_lock+0x8>)
 8000b5e:	f7ff bf0e 	b.w	800097e <__retarget_lock_acquire_recursive>
 8000b62:	bf00      	nop
 8000b64:	200001c0 	.word	0x200001c0

08000b68 <__malloc_unlock>:
 8000b68:	4801      	ldr	r0, [pc, #4]	; (8000b70 <__malloc_unlock+0x8>)
 8000b6a:	f7ff bf09 	b.w	8000980 <__retarget_lock_release_recursive>
 8000b6e:	bf00      	nop
 8000b70:	200001c0 	.word	0x200001c0

08000b74 <__sfputc_r>:
 8000b74:	6893      	ldr	r3, [r2, #8]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	b410      	push	{r4}
 8000b7c:	6093      	str	r3, [r2, #8]
 8000b7e:	da08      	bge.n	8000b92 <__sfputc_r+0x1e>
 8000b80:	6994      	ldr	r4, [r2, #24]
 8000b82:	42a3      	cmp	r3, r4
 8000b84:	db01      	blt.n	8000b8a <__sfputc_r+0x16>
 8000b86:	290a      	cmp	r1, #10
 8000b88:	d103      	bne.n	8000b92 <__sfputc_r+0x1e>
 8000b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b8e:	f000 bb73 	b.w	8001278 <__swbuf_r>
 8000b92:	6813      	ldr	r3, [r2, #0]
 8000b94:	1c58      	adds	r0, r3, #1
 8000b96:	6010      	str	r0, [r2, #0]
 8000b98:	7019      	strb	r1, [r3, #0]
 8000b9a:	4608      	mov	r0, r1
 8000b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <__sfputs_r>:
 8000ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	4614      	mov	r4, r2
 8000baa:	18d5      	adds	r5, r2, r3
 8000bac:	42ac      	cmp	r4, r5
 8000bae:	d101      	bne.n	8000bb4 <__sfputs_r+0x12>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	e007      	b.n	8000bc4 <__sfputs_r+0x22>
 8000bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb8:	463a      	mov	r2, r7
 8000bba:	4630      	mov	r0, r6
 8000bbc:	f7ff ffda 	bl	8000b74 <__sfputc_r>
 8000bc0:	1c43      	adds	r3, r0, #1
 8000bc2:	d1f3      	bne.n	8000bac <__sfputs_r+0xa>
 8000bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000bc8 <_vfiprintf_r>:
 8000bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bcc:	460d      	mov	r5, r1
 8000bce:	b09d      	sub	sp, #116	; 0x74
 8000bd0:	4614      	mov	r4, r2
 8000bd2:	4698      	mov	r8, r3
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	b118      	cbz	r0, 8000be0 <_vfiprintf_r+0x18>
 8000bd8:	6a03      	ldr	r3, [r0, #32]
 8000bda:	b90b      	cbnz	r3, 8000be0 <_vfiprintf_r+0x18>
 8000bdc:	f7ff fdca 	bl	8000774 <__sinit>
 8000be0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000be2:	07d9      	lsls	r1, r3, #31
 8000be4:	d405      	bmi.n	8000bf2 <_vfiprintf_r+0x2a>
 8000be6:	89ab      	ldrh	r3, [r5, #12]
 8000be8:	059a      	lsls	r2, r3, #22
 8000bea:	d402      	bmi.n	8000bf2 <_vfiprintf_r+0x2a>
 8000bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bee:	f7ff fec6 	bl	800097e <__retarget_lock_acquire_recursive>
 8000bf2:	89ab      	ldrh	r3, [r5, #12]
 8000bf4:	071b      	lsls	r3, r3, #28
 8000bf6:	d501      	bpl.n	8000bfc <_vfiprintf_r+0x34>
 8000bf8:	692b      	ldr	r3, [r5, #16]
 8000bfa:	b99b      	cbnz	r3, 8000c24 <_vfiprintf_r+0x5c>
 8000bfc:	4629      	mov	r1, r5
 8000bfe:	4630      	mov	r0, r6
 8000c00:	f000 fb78 	bl	80012f4 <__swsetup_r>
 8000c04:	b170      	cbz	r0, 8000c24 <_vfiprintf_r+0x5c>
 8000c06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c08:	07dc      	lsls	r4, r3, #31
 8000c0a:	d504      	bpl.n	8000c16 <_vfiprintf_r+0x4e>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	b01d      	add	sp, #116	; 0x74
 8000c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c16:	89ab      	ldrh	r3, [r5, #12]
 8000c18:	0598      	lsls	r0, r3, #22
 8000c1a:	d4f7      	bmi.n	8000c0c <_vfiprintf_r+0x44>
 8000c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c1e:	f7ff feaf 	bl	8000980 <__retarget_lock_release_recursive>
 8000c22:	e7f3      	b.n	8000c0c <_vfiprintf_r+0x44>
 8000c24:	2300      	movs	r3, #0
 8000c26:	9309      	str	r3, [sp, #36]	; 0x24
 8000c28:	2320      	movs	r3, #32
 8000c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c32:	2330      	movs	r3, #48	; 0x30
 8000c34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000de8 <_vfiprintf_r+0x220>
 8000c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c3c:	f04f 0901 	mov.w	r9, #1
 8000c40:	4623      	mov	r3, r4
 8000c42:	469a      	mov	sl, r3
 8000c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c48:	b10a      	cbz	r2, 8000c4e <_vfiprintf_r+0x86>
 8000c4a:	2a25      	cmp	r2, #37	; 0x25
 8000c4c:	d1f9      	bne.n	8000c42 <_vfiprintf_r+0x7a>
 8000c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8000c52:	d00b      	beq.n	8000c6c <_vfiprintf_r+0xa4>
 8000c54:	465b      	mov	r3, fp
 8000c56:	4622      	mov	r2, r4
 8000c58:	4629      	mov	r1, r5
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f7ff ffa1 	bl	8000ba2 <__sfputs_r>
 8000c60:	3001      	adds	r0, #1
 8000c62:	f000 80a9 	beq.w	8000db8 <_vfiprintf_r+0x1f0>
 8000c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c68:	445a      	add	r2, fp
 8000c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8000c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	f000 80a1 	beq.w	8000db8 <_vfiprintf_r+0x1f0>
 8000c76:	2300      	movs	r3, #0
 8000c78:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c80:	f10a 0a01 	add.w	sl, sl, #1
 8000c84:	9304      	str	r3, [sp, #16]
 8000c86:	9307      	str	r3, [sp, #28]
 8000c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8000c8e:	4654      	mov	r4, sl
 8000c90:	2205      	movs	r2, #5
 8000c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c96:	4854      	ldr	r0, [pc, #336]	; (8000de8 <_vfiprintf_r+0x220>)
 8000c98:	f7ff faa2 	bl	80001e0 <memchr>
 8000c9c:	9a04      	ldr	r2, [sp, #16]
 8000c9e:	b9d8      	cbnz	r0, 8000cd8 <_vfiprintf_r+0x110>
 8000ca0:	06d1      	lsls	r1, r2, #27
 8000ca2:	bf44      	itt	mi
 8000ca4:	2320      	movmi	r3, #32
 8000ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000caa:	0713      	lsls	r3, r2, #28
 8000cac:	bf44      	itt	mi
 8000cae:	232b      	movmi	r3, #43	; 0x2b
 8000cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8000cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8000cba:	d015      	beq.n	8000ce8 <_vfiprintf_r+0x120>
 8000cbc:	9a07      	ldr	r2, [sp, #28]
 8000cbe:	4654      	mov	r4, sl
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f04f 0c0a 	mov.w	ip, #10
 8000cc6:	4621      	mov	r1, r4
 8000cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ccc:	3b30      	subs	r3, #48	; 0x30
 8000cce:	2b09      	cmp	r3, #9
 8000cd0:	d94d      	bls.n	8000d6e <_vfiprintf_r+0x1a6>
 8000cd2:	b1b0      	cbz	r0, 8000d02 <_vfiprintf_r+0x13a>
 8000cd4:	9207      	str	r2, [sp, #28]
 8000cd6:	e014      	b.n	8000d02 <_vfiprintf_r+0x13a>
 8000cd8:	eba0 0308 	sub.w	r3, r0, r8
 8000cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	9304      	str	r3, [sp, #16]
 8000ce4:	46a2      	mov	sl, r4
 8000ce6:	e7d2      	b.n	8000c8e <_vfiprintf_r+0xc6>
 8000ce8:	9b03      	ldr	r3, [sp, #12]
 8000cea:	1d19      	adds	r1, r3, #4
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	9103      	str	r1, [sp, #12]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bfbb      	ittet	lt
 8000cf4:	425b      	neglt	r3, r3
 8000cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8000cfa:	9307      	strge	r3, [sp, #28]
 8000cfc:	9307      	strlt	r3, [sp, #28]
 8000cfe:	bfb8      	it	lt
 8000d00:	9204      	strlt	r2, [sp, #16]
 8000d02:	7823      	ldrb	r3, [r4, #0]
 8000d04:	2b2e      	cmp	r3, #46	; 0x2e
 8000d06:	d10c      	bne.n	8000d22 <_vfiprintf_r+0x15a>
 8000d08:	7863      	ldrb	r3, [r4, #1]
 8000d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d0c:	d134      	bne.n	8000d78 <_vfiprintf_r+0x1b0>
 8000d0e:	9b03      	ldr	r3, [sp, #12]
 8000d10:	1d1a      	adds	r2, r3, #4
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	9203      	str	r2, [sp, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bfb8      	it	lt
 8000d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d1e:	3402      	adds	r4, #2
 8000d20:	9305      	str	r3, [sp, #20]
 8000d22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000df8 <_vfiprintf_r+0x230>
 8000d26:	7821      	ldrb	r1, [r4, #0]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	4650      	mov	r0, sl
 8000d2c:	f7ff fa58 	bl	80001e0 <memchr>
 8000d30:	b138      	cbz	r0, 8000d42 <_vfiprintf_r+0x17a>
 8000d32:	9b04      	ldr	r3, [sp, #16]
 8000d34:	eba0 000a 	sub.w	r0, r0, sl
 8000d38:	2240      	movs	r2, #64	; 0x40
 8000d3a:	4082      	lsls	r2, r0
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	3401      	adds	r4, #1
 8000d40:	9304      	str	r3, [sp, #16]
 8000d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d46:	4829      	ldr	r0, [pc, #164]	; (8000dec <_vfiprintf_r+0x224>)
 8000d48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d4c:	2206      	movs	r2, #6
 8000d4e:	f7ff fa47 	bl	80001e0 <memchr>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d03f      	beq.n	8000dd6 <_vfiprintf_r+0x20e>
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <_vfiprintf_r+0x228>)
 8000d58:	bb1b      	cbnz	r3, 8000da2 <_vfiprintf_r+0x1da>
 8000d5a:	9b03      	ldr	r3, [sp, #12]
 8000d5c:	3307      	adds	r3, #7
 8000d5e:	f023 0307 	bic.w	r3, r3, #7
 8000d62:	3308      	adds	r3, #8
 8000d64:	9303      	str	r3, [sp, #12]
 8000d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d68:	443b      	add	r3, r7
 8000d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d6c:	e768      	b.n	8000c40 <_vfiprintf_r+0x78>
 8000d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d72:	460c      	mov	r4, r1
 8000d74:	2001      	movs	r0, #1
 8000d76:	e7a6      	b.n	8000cc6 <_vfiprintf_r+0xfe>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	3401      	adds	r4, #1
 8000d7c:	9305      	str	r3, [sp, #20]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f04f 0c0a 	mov.w	ip, #10
 8000d84:	4620      	mov	r0, r4
 8000d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d8a:	3a30      	subs	r2, #48	; 0x30
 8000d8c:	2a09      	cmp	r2, #9
 8000d8e:	d903      	bls.n	8000d98 <_vfiprintf_r+0x1d0>
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0c6      	beq.n	8000d22 <_vfiprintf_r+0x15a>
 8000d94:	9105      	str	r1, [sp, #20]
 8000d96:	e7c4      	b.n	8000d22 <_vfiprintf_r+0x15a>
 8000d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e7f0      	b.n	8000d84 <_vfiprintf_r+0x1bc>
 8000da2:	ab03      	add	r3, sp, #12
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	462a      	mov	r2, r5
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <_vfiprintf_r+0x22c>)
 8000daa:	a904      	add	r1, sp, #16
 8000dac:	4630      	mov	r0, r6
 8000dae:	f3af 8000 	nop.w
 8000db2:	4607      	mov	r7, r0
 8000db4:	1c78      	adds	r0, r7, #1
 8000db6:	d1d6      	bne.n	8000d66 <_vfiprintf_r+0x19e>
 8000db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000dba:	07d9      	lsls	r1, r3, #31
 8000dbc:	d405      	bmi.n	8000dca <_vfiprintf_r+0x202>
 8000dbe:	89ab      	ldrh	r3, [r5, #12]
 8000dc0:	059a      	lsls	r2, r3, #22
 8000dc2:	d402      	bmi.n	8000dca <_vfiprintf_r+0x202>
 8000dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000dc6:	f7ff fddb 	bl	8000980 <__retarget_lock_release_recursive>
 8000dca:	89ab      	ldrh	r3, [r5, #12]
 8000dcc:	065b      	lsls	r3, r3, #25
 8000dce:	f53f af1d 	bmi.w	8000c0c <_vfiprintf_r+0x44>
 8000dd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000dd4:	e71c      	b.n	8000c10 <_vfiprintf_r+0x48>
 8000dd6:	ab03      	add	r3, sp, #12
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	462a      	mov	r2, r5
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <_vfiprintf_r+0x22c>)
 8000dde:	a904      	add	r1, sp, #16
 8000de0:	4630      	mov	r0, r6
 8000de2:	f000 f879 	bl	8000ed8 <_printf_i>
 8000de6:	e7e4      	b.n	8000db2 <_vfiprintf_r+0x1ea>
 8000de8:	08001533 	.word	0x08001533
 8000dec:	0800153d 	.word	0x0800153d
 8000df0:	00000000 	.word	0x00000000
 8000df4:	08000ba3 	.word	0x08000ba3
 8000df8:	08001539 	.word	0x08001539

08000dfc <_printf_common>:
 8000dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e00:	4616      	mov	r6, r2
 8000e02:	4699      	mov	r9, r3
 8000e04:	688a      	ldr	r2, [r1, #8]
 8000e06:	690b      	ldr	r3, [r1, #16]
 8000e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	bfb8      	it	lt
 8000e10:	4613      	movlt	r3, r2
 8000e12:	6033      	str	r3, [r6, #0]
 8000e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e18:	4607      	mov	r7, r0
 8000e1a:	460c      	mov	r4, r1
 8000e1c:	b10a      	cbz	r2, 8000e22 <_printf_common+0x26>
 8000e1e:	3301      	adds	r3, #1
 8000e20:	6033      	str	r3, [r6, #0]
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	0699      	lsls	r1, r3, #26
 8000e26:	bf42      	ittt	mi
 8000e28:	6833      	ldrmi	r3, [r6, #0]
 8000e2a:	3302      	addmi	r3, #2
 8000e2c:	6033      	strmi	r3, [r6, #0]
 8000e2e:	6825      	ldr	r5, [r4, #0]
 8000e30:	f015 0506 	ands.w	r5, r5, #6
 8000e34:	d106      	bne.n	8000e44 <_printf_common+0x48>
 8000e36:	f104 0a19 	add.w	sl, r4, #25
 8000e3a:	68e3      	ldr	r3, [r4, #12]
 8000e3c:	6832      	ldr	r2, [r6, #0]
 8000e3e:	1a9b      	subs	r3, r3, r2
 8000e40:	42ab      	cmp	r3, r5
 8000e42:	dc26      	bgt.n	8000e92 <_printf_common+0x96>
 8000e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e48:	1e13      	subs	r3, r2, #0
 8000e4a:	6822      	ldr	r2, [r4, #0]
 8000e4c:	bf18      	it	ne
 8000e4e:	2301      	movne	r3, #1
 8000e50:	0692      	lsls	r2, r2, #26
 8000e52:	d42b      	bmi.n	8000eac <_printf_common+0xb0>
 8000e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e58:	4649      	mov	r1, r9
 8000e5a:	4638      	mov	r0, r7
 8000e5c:	47c0      	blx	r8
 8000e5e:	3001      	adds	r0, #1
 8000e60:	d01e      	beq.n	8000ea0 <_printf_common+0xa4>
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	6922      	ldr	r2, [r4, #16]
 8000e66:	f003 0306 	and.w	r3, r3, #6
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf02      	ittt	eq
 8000e6e:	68e5      	ldreq	r5, [r4, #12]
 8000e70:	6833      	ldreq	r3, [r6, #0]
 8000e72:	1aed      	subeq	r5, r5, r3
 8000e74:	68a3      	ldr	r3, [r4, #8]
 8000e76:	bf0c      	ite	eq
 8000e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e7c:	2500      	movne	r5, #0
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	bfc4      	itt	gt
 8000e82:	1a9b      	subgt	r3, r3, r2
 8000e84:	18ed      	addgt	r5, r5, r3
 8000e86:	2600      	movs	r6, #0
 8000e88:	341a      	adds	r4, #26
 8000e8a:	42b5      	cmp	r5, r6
 8000e8c:	d11a      	bne.n	8000ec4 <_printf_common+0xc8>
 8000e8e:	2000      	movs	r0, #0
 8000e90:	e008      	b.n	8000ea4 <_printf_common+0xa8>
 8000e92:	2301      	movs	r3, #1
 8000e94:	4652      	mov	r2, sl
 8000e96:	4649      	mov	r1, r9
 8000e98:	4638      	mov	r0, r7
 8000e9a:	47c0      	blx	r8
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	d103      	bne.n	8000ea8 <_printf_common+0xac>
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	3501      	adds	r5, #1
 8000eaa:	e7c6      	b.n	8000e3a <_printf_common+0x3e>
 8000eac:	18e1      	adds	r1, r4, r3
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	2030      	movs	r0, #48	; 0x30
 8000eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000eb6:	4422      	add	r2, r4
 8000eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	e7c7      	b.n	8000e54 <_printf_common+0x58>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	4649      	mov	r1, r9
 8000eca:	4638      	mov	r0, r7
 8000ecc:	47c0      	blx	r8
 8000ece:	3001      	adds	r0, #1
 8000ed0:	d0e6      	beq.n	8000ea0 <_printf_common+0xa4>
 8000ed2:	3601      	adds	r6, #1
 8000ed4:	e7d9      	b.n	8000e8a <_printf_common+0x8e>
	...

08000ed8 <_printf_i>:
 8000ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000edc:	7e0f      	ldrb	r7, [r1, #24]
 8000ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ee0:	2f78      	cmp	r7, #120	; 0x78
 8000ee2:	4691      	mov	r9, r2
 8000ee4:	4680      	mov	r8, r0
 8000ee6:	460c      	mov	r4, r1
 8000ee8:	469a      	mov	sl, r3
 8000eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000eee:	d807      	bhi.n	8000f00 <_printf_i+0x28>
 8000ef0:	2f62      	cmp	r7, #98	; 0x62
 8000ef2:	d80a      	bhi.n	8000f0a <_printf_i+0x32>
 8000ef4:	2f00      	cmp	r7, #0
 8000ef6:	f000 80d4 	beq.w	80010a2 <_printf_i+0x1ca>
 8000efa:	2f58      	cmp	r7, #88	; 0x58
 8000efc:	f000 80c0 	beq.w	8001080 <_printf_i+0x1a8>
 8000f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f08:	e03a      	b.n	8000f80 <_printf_i+0xa8>
 8000f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f0e:	2b15      	cmp	r3, #21
 8000f10:	d8f6      	bhi.n	8000f00 <_printf_i+0x28>
 8000f12:	a101      	add	r1, pc, #4	; (adr r1, 8000f18 <_printf_i+0x40>)
 8000f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f18:	08000f71 	.word	0x08000f71
 8000f1c:	08000f85 	.word	0x08000f85
 8000f20:	08000f01 	.word	0x08000f01
 8000f24:	08000f01 	.word	0x08000f01
 8000f28:	08000f01 	.word	0x08000f01
 8000f2c:	08000f01 	.word	0x08000f01
 8000f30:	08000f85 	.word	0x08000f85
 8000f34:	08000f01 	.word	0x08000f01
 8000f38:	08000f01 	.word	0x08000f01
 8000f3c:	08000f01 	.word	0x08000f01
 8000f40:	08000f01 	.word	0x08000f01
 8000f44:	08001089 	.word	0x08001089
 8000f48:	08000fb1 	.word	0x08000fb1
 8000f4c:	08001043 	.word	0x08001043
 8000f50:	08000f01 	.word	0x08000f01
 8000f54:	08000f01 	.word	0x08000f01
 8000f58:	080010ab 	.word	0x080010ab
 8000f5c:	08000f01 	.word	0x08000f01
 8000f60:	08000fb1 	.word	0x08000fb1
 8000f64:	08000f01 	.word	0x08000f01
 8000f68:	08000f01 	.word	0x08000f01
 8000f6c:	0800104b 	.word	0x0800104b
 8000f70:	682b      	ldr	r3, [r5, #0]
 8000f72:	1d1a      	adds	r2, r3, #4
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	602a      	str	r2, [r5, #0]
 8000f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f80:	2301      	movs	r3, #1
 8000f82:	e09f      	b.n	80010c4 <_printf_i+0x1ec>
 8000f84:	6820      	ldr	r0, [r4, #0]
 8000f86:	682b      	ldr	r3, [r5, #0]
 8000f88:	0607      	lsls	r7, r0, #24
 8000f8a:	f103 0104 	add.w	r1, r3, #4
 8000f8e:	6029      	str	r1, [r5, #0]
 8000f90:	d501      	bpl.n	8000f96 <_printf_i+0xbe>
 8000f92:	681e      	ldr	r6, [r3, #0]
 8000f94:	e003      	b.n	8000f9e <_printf_i+0xc6>
 8000f96:	0646      	lsls	r6, r0, #25
 8000f98:	d5fb      	bpl.n	8000f92 <_printf_i+0xba>
 8000f9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000f9e:	2e00      	cmp	r6, #0
 8000fa0:	da03      	bge.n	8000faa <_printf_i+0xd2>
 8000fa2:	232d      	movs	r3, #45	; 0x2d
 8000fa4:	4276      	negs	r6, r6
 8000fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000faa:	485a      	ldr	r0, [pc, #360]	; (8001114 <_printf_i+0x23c>)
 8000fac:	230a      	movs	r3, #10
 8000fae:	e012      	b.n	8000fd6 <_printf_i+0xfe>
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	6820      	ldr	r0, [r4, #0]
 8000fb4:	1d19      	adds	r1, r3, #4
 8000fb6:	6029      	str	r1, [r5, #0]
 8000fb8:	0605      	lsls	r5, r0, #24
 8000fba:	d501      	bpl.n	8000fc0 <_printf_i+0xe8>
 8000fbc:	681e      	ldr	r6, [r3, #0]
 8000fbe:	e002      	b.n	8000fc6 <_printf_i+0xee>
 8000fc0:	0641      	lsls	r1, r0, #25
 8000fc2:	d5fb      	bpl.n	8000fbc <_printf_i+0xe4>
 8000fc4:	881e      	ldrh	r6, [r3, #0]
 8000fc6:	4853      	ldr	r0, [pc, #332]	; (8001114 <_printf_i+0x23c>)
 8000fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8000fca:	bf0c      	ite	eq
 8000fcc:	2308      	moveq	r3, #8
 8000fce:	230a      	movne	r3, #10
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fd6:	6865      	ldr	r5, [r4, #4]
 8000fd8:	60a5      	str	r5, [r4, #8]
 8000fda:	2d00      	cmp	r5, #0
 8000fdc:	bfa2      	ittt	ge
 8000fde:	6821      	ldrge	r1, [r4, #0]
 8000fe0:	f021 0104 	bicge.w	r1, r1, #4
 8000fe4:	6021      	strge	r1, [r4, #0]
 8000fe6:	b90e      	cbnz	r6, 8000fec <_printf_i+0x114>
 8000fe8:	2d00      	cmp	r5, #0
 8000fea:	d04b      	beq.n	8001084 <_printf_i+0x1ac>
 8000fec:	4615      	mov	r5, r2
 8000fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8000ff6:	5dc7      	ldrb	r7, [r0, r7]
 8000ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ffc:	4637      	mov	r7, r6
 8000ffe:	42bb      	cmp	r3, r7
 8001000:	460e      	mov	r6, r1
 8001002:	d9f4      	bls.n	8000fee <_printf_i+0x116>
 8001004:	2b08      	cmp	r3, #8
 8001006:	d10b      	bne.n	8001020 <_printf_i+0x148>
 8001008:	6823      	ldr	r3, [r4, #0]
 800100a:	07de      	lsls	r6, r3, #31
 800100c:	d508      	bpl.n	8001020 <_printf_i+0x148>
 800100e:	6923      	ldr	r3, [r4, #16]
 8001010:	6861      	ldr	r1, [r4, #4]
 8001012:	4299      	cmp	r1, r3
 8001014:	bfde      	ittt	le
 8001016:	2330      	movle	r3, #48	; 0x30
 8001018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800101c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001020:	1b52      	subs	r2, r2, r5
 8001022:	6122      	str	r2, [r4, #16]
 8001024:	f8cd a000 	str.w	sl, [sp]
 8001028:	464b      	mov	r3, r9
 800102a:	aa03      	add	r2, sp, #12
 800102c:	4621      	mov	r1, r4
 800102e:	4640      	mov	r0, r8
 8001030:	f7ff fee4 	bl	8000dfc <_printf_common>
 8001034:	3001      	adds	r0, #1
 8001036:	d14a      	bne.n	80010ce <_printf_i+0x1f6>
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	b004      	add	sp, #16
 800103e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	6023      	str	r3, [r4, #0]
 800104a:	4833      	ldr	r0, [pc, #204]	; (8001118 <_printf_i+0x240>)
 800104c:	2778      	movs	r7, #120	; 0x78
 800104e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	6829      	ldr	r1, [r5, #0]
 8001056:	061f      	lsls	r7, r3, #24
 8001058:	f851 6b04 	ldr.w	r6, [r1], #4
 800105c:	d402      	bmi.n	8001064 <_printf_i+0x18c>
 800105e:	065f      	lsls	r7, r3, #25
 8001060:	bf48      	it	mi
 8001062:	b2b6      	uxthmi	r6, r6
 8001064:	07df      	lsls	r7, r3, #31
 8001066:	bf48      	it	mi
 8001068:	f043 0320 	orrmi.w	r3, r3, #32
 800106c:	6029      	str	r1, [r5, #0]
 800106e:	bf48      	it	mi
 8001070:	6023      	strmi	r3, [r4, #0]
 8001072:	b91e      	cbnz	r6, 800107c <_printf_i+0x1a4>
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	f023 0320 	bic.w	r3, r3, #32
 800107a:	6023      	str	r3, [r4, #0]
 800107c:	2310      	movs	r3, #16
 800107e:	e7a7      	b.n	8000fd0 <_printf_i+0xf8>
 8001080:	4824      	ldr	r0, [pc, #144]	; (8001114 <_printf_i+0x23c>)
 8001082:	e7e4      	b.n	800104e <_printf_i+0x176>
 8001084:	4615      	mov	r5, r2
 8001086:	e7bd      	b.n	8001004 <_printf_i+0x12c>
 8001088:	682b      	ldr	r3, [r5, #0]
 800108a:	6826      	ldr	r6, [r4, #0]
 800108c:	6961      	ldr	r1, [r4, #20]
 800108e:	1d18      	adds	r0, r3, #4
 8001090:	6028      	str	r0, [r5, #0]
 8001092:	0635      	lsls	r5, r6, #24
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	d501      	bpl.n	800109c <_printf_i+0x1c4>
 8001098:	6019      	str	r1, [r3, #0]
 800109a:	e002      	b.n	80010a2 <_printf_i+0x1ca>
 800109c:	0670      	lsls	r0, r6, #25
 800109e:	d5fb      	bpl.n	8001098 <_printf_i+0x1c0>
 80010a0:	8019      	strh	r1, [r3, #0]
 80010a2:	2300      	movs	r3, #0
 80010a4:	6123      	str	r3, [r4, #16]
 80010a6:	4615      	mov	r5, r2
 80010a8:	e7bc      	b.n	8001024 <_printf_i+0x14c>
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	1d1a      	adds	r2, r3, #4
 80010ae:	602a      	str	r2, [r5, #0]
 80010b0:	681d      	ldr	r5, [r3, #0]
 80010b2:	6862      	ldr	r2, [r4, #4]
 80010b4:	2100      	movs	r1, #0
 80010b6:	4628      	mov	r0, r5
 80010b8:	f7ff f892 	bl	80001e0 <memchr>
 80010bc:	b108      	cbz	r0, 80010c2 <_printf_i+0x1ea>
 80010be:	1b40      	subs	r0, r0, r5
 80010c0:	6060      	str	r0, [r4, #4]
 80010c2:	6863      	ldr	r3, [r4, #4]
 80010c4:	6123      	str	r3, [r4, #16]
 80010c6:	2300      	movs	r3, #0
 80010c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010cc:	e7aa      	b.n	8001024 <_printf_i+0x14c>
 80010ce:	6923      	ldr	r3, [r4, #16]
 80010d0:	462a      	mov	r2, r5
 80010d2:	4649      	mov	r1, r9
 80010d4:	4640      	mov	r0, r8
 80010d6:	47d0      	blx	sl
 80010d8:	3001      	adds	r0, #1
 80010da:	d0ad      	beq.n	8001038 <_printf_i+0x160>
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	079b      	lsls	r3, r3, #30
 80010e0:	d413      	bmi.n	800110a <_printf_i+0x232>
 80010e2:	68e0      	ldr	r0, [r4, #12]
 80010e4:	9b03      	ldr	r3, [sp, #12]
 80010e6:	4298      	cmp	r0, r3
 80010e8:	bfb8      	it	lt
 80010ea:	4618      	movlt	r0, r3
 80010ec:	e7a6      	b.n	800103c <_printf_i+0x164>
 80010ee:	2301      	movs	r3, #1
 80010f0:	4632      	mov	r2, r6
 80010f2:	4649      	mov	r1, r9
 80010f4:	4640      	mov	r0, r8
 80010f6:	47d0      	blx	sl
 80010f8:	3001      	adds	r0, #1
 80010fa:	d09d      	beq.n	8001038 <_printf_i+0x160>
 80010fc:	3501      	adds	r5, #1
 80010fe:	68e3      	ldr	r3, [r4, #12]
 8001100:	9903      	ldr	r1, [sp, #12]
 8001102:	1a5b      	subs	r3, r3, r1
 8001104:	42ab      	cmp	r3, r5
 8001106:	dcf2      	bgt.n	80010ee <_printf_i+0x216>
 8001108:	e7eb      	b.n	80010e2 <_printf_i+0x20a>
 800110a:	2500      	movs	r5, #0
 800110c:	f104 0619 	add.w	r6, r4, #25
 8001110:	e7f5      	b.n	80010fe <_printf_i+0x226>
 8001112:	bf00      	nop
 8001114:	08001544 	.word	0x08001544
 8001118:	08001555 	.word	0x08001555

0800111c <__sflush_r>:
 800111c:	898a      	ldrh	r2, [r1, #12]
 800111e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001122:	4605      	mov	r5, r0
 8001124:	0710      	lsls	r0, r2, #28
 8001126:	460c      	mov	r4, r1
 8001128:	d458      	bmi.n	80011dc <__sflush_r+0xc0>
 800112a:	684b      	ldr	r3, [r1, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dc05      	bgt.n	800113c <__sflush_r+0x20>
 8001130:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	dc02      	bgt.n	800113c <__sflush_r+0x20>
 8001136:	2000      	movs	r0, #0
 8001138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800113c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800113e:	2e00      	cmp	r6, #0
 8001140:	d0f9      	beq.n	8001136 <__sflush_r+0x1a>
 8001142:	2300      	movs	r3, #0
 8001144:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001148:	682f      	ldr	r7, [r5, #0]
 800114a:	6a21      	ldr	r1, [r4, #32]
 800114c:	602b      	str	r3, [r5, #0]
 800114e:	d032      	beq.n	80011b6 <__sflush_r+0x9a>
 8001150:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001152:	89a3      	ldrh	r3, [r4, #12]
 8001154:	075a      	lsls	r2, r3, #29
 8001156:	d505      	bpl.n	8001164 <__sflush_r+0x48>
 8001158:	6863      	ldr	r3, [r4, #4]
 800115a:	1ac0      	subs	r0, r0, r3
 800115c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800115e:	b10b      	cbz	r3, 8001164 <__sflush_r+0x48>
 8001160:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001162:	1ac0      	subs	r0, r0, r3
 8001164:	2300      	movs	r3, #0
 8001166:	4602      	mov	r2, r0
 8001168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800116a:	6a21      	ldr	r1, [r4, #32]
 800116c:	4628      	mov	r0, r5
 800116e:	47b0      	blx	r6
 8001170:	1c43      	adds	r3, r0, #1
 8001172:	89a3      	ldrh	r3, [r4, #12]
 8001174:	d106      	bne.n	8001184 <__sflush_r+0x68>
 8001176:	6829      	ldr	r1, [r5, #0]
 8001178:	291d      	cmp	r1, #29
 800117a:	d82b      	bhi.n	80011d4 <__sflush_r+0xb8>
 800117c:	4a29      	ldr	r2, [pc, #164]	; (8001224 <__sflush_r+0x108>)
 800117e:	410a      	asrs	r2, r1
 8001180:	07d6      	lsls	r6, r2, #31
 8001182:	d427      	bmi.n	80011d4 <__sflush_r+0xb8>
 8001184:	2200      	movs	r2, #0
 8001186:	6062      	str	r2, [r4, #4]
 8001188:	04d9      	lsls	r1, r3, #19
 800118a:	6922      	ldr	r2, [r4, #16]
 800118c:	6022      	str	r2, [r4, #0]
 800118e:	d504      	bpl.n	800119a <__sflush_r+0x7e>
 8001190:	1c42      	adds	r2, r0, #1
 8001192:	d101      	bne.n	8001198 <__sflush_r+0x7c>
 8001194:	682b      	ldr	r3, [r5, #0]
 8001196:	b903      	cbnz	r3, 800119a <__sflush_r+0x7e>
 8001198:	6560      	str	r0, [r4, #84]	; 0x54
 800119a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800119c:	602f      	str	r7, [r5, #0]
 800119e:	2900      	cmp	r1, #0
 80011a0:	d0c9      	beq.n	8001136 <__sflush_r+0x1a>
 80011a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d002      	beq.n	80011b0 <__sflush_r+0x94>
 80011aa:	4628      	mov	r0, r5
 80011ac:	f7ff fbea 	bl	8000984 <_free_r>
 80011b0:	2000      	movs	r0, #0
 80011b2:	6360      	str	r0, [r4, #52]	; 0x34
 80011b4:	e7c0      	b.n	8001138 <__sflush_r+0x1c>
 80011b6:	2301      	movs	r3, #1
 80011b8:	4628      	mov	r0, r5
 80011ba:	47b0      	blx	r6
 80011bc:	1c41      	adds	r1, r0, #1
 80011be:	d1c8      	bne.n	8001152 <__sflush_r+0x36>
 80011c0:	682b      	ldr	r3, [r5, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0c5      	beq.n	8001152 <__sflush_r+0x36>
 80011c6:	2b1d      	cmp	r3, #29
 80011c8:	d001      	beq.n	80011ce <__sflush_r+0xb2>
 80011ca:	2b16      	cmp	r3, #22
 80011cc:	d101      	bne.n	80011d2 <__sflush_r+0xb6>
 80011ce:	602f      	str	r7, [r5, #0]
 80011d0:	e7b1      	b.n	8001136 <__sflush_r+0x1a>
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d8:	81a3      	strh	r3, [r4, #12]
 80011da:	e7ad      	b.n	8001138 <__sflush_r+0x1c>
 80011dc:	690f      	ldr	r7, [r1, #16]
 80011de:	2f00      	cmp	r7, #0
 80011e0:	d0a9      	beq.n	8001136 <__sflush_r+0x1a>
 80011e2:	0793      	lsls	r3, r2, #30
 80011e4:	680e      	ldr	r6, [r1, #0]
 80011e6:	bf08      	it	eq
 80011e8:	694b      	ldreq	r3, [r1, #20]
 80011ea:	600f      	str	r7, [r1, #0]
 80011ec:	bf18      	it	ne
 80011ee:	2300      	movne	r3, #0
 80011f0:	eba6 0807 	sub.w	r8, r6, r7
 80011f4:	608b      	str	r3, [r1, #8]
 80011f6:	f1b8 0f00 	cmp.w	r8, #0
 80011fa:	dd9c      	ble.n	8001136 <__sflush_r+0x1a>
 80011fc:	6a21      	ldr	r1, [r4, #32]
 80011fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001200:	4643      	mov	r3, r8
 8001202:	463a      	mov	r2, r7
 8001204:	4628      	mov	r0, r5
 8001206:	47b0      	blx	r6
 8001208:	2800      	cmp	r0, #0
 800120a:	dc06      	bgt.n	800121a <__sflush_r+0xfe>
 800120c:	89a3      	ldrh	r3, [r4, #12]
 800120e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001212:	81a3      	strh	r3, [r4, #12]
 8001214:	f04f 30ff 	mov.w	r0, #4294967295
 8001218:	e78e      	b.n	8001138 <__sflush_r+0x1c>
 800121a:	4407      	add	r7, r0
 800121c:	eba8 0800 	sub.w	r8, r8, r0
 8001220:	e7e9      	b.n	80011f6 <__sflush_r+0xda>
 8001222:	bf00      	nop
 8001224:	dfbffffe 	.word	0xdfbffffe

08001228 <_fflush_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	690b      	ldr	r3, [r1, #16]
 800122c:	4605      	mov	r5, r0
 800122e:	460c      	mov	r4, r1
 8001230:	b913      	cbnz	r3, 8001238 <_fflush_r+0x10>
 8001232:	2500      	movs	r5, #0
 8001234:	4628      	mov	r0, r5
 8001236:	bd38      	pop	{r3, r4, r5, pc}
 8001238:	b118      	cbz	r0, 8001242 <_fflush_r+0x1a>
 800123a:	6a03      	ldr	r3, [r0, #32]
 800123c:	b90b      	cbnz	r3, 8001242 <_fflush_r+0x1a>
 800123e:	f7ff fa99 	bl	8000774 <__sinit>
 8001242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f3      	beq.n	8001232 <_fflush_r+0xa>
 800124a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800124c:	07d0      	lsls	r0, r2, #31
 800124e:	d404      	bmi.n	800125a <_fflush_r+0x32>
 8001250:	0599      	lsls	r1, r3, #22
 8001252:	d402      	bmi.n	800125a <_fflush_r+0x32>
 8001254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001256:	f7ff fb92 	bl	800097e <__retarget_lock_acquire_recursive>
 800125a:	4628      	mov	r0, r5
 800125c:	4621      	mov	r1, r4
 800125e:	f7ff ff5d 	bl	800111c <__sflush_r>
 8001262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001264:	07da      	lsls	r2, r3, #31
 8001266:	4605      	mov	r5, r0
 8001268:	d4e4      	bmi.n	8001234 <_fflush_r+0xc>
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	059b      	lsls	r3, r3, #22
 800126e:	d4e1      	bmi.n	8001234 <_fflush_r+0xc>
 8001270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001272:	f7ff fb85 	bl	8000980 <__retarget_lock_release_recursive>
 8001276:	e7dd      	b.n	8001234 <_fflush_r+0xc>

08001278 <__swbuf_r>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	460e      	mov	r6, r1
 800127c:	4614      	mov	r4, r2
 800127e:	4605      	mov	r5, r0
 8001280:	b118      	cbz	r0, 800128a <__swbuf_r+0x12>
 8001282:	6a03      	ldr	r3, [r0, #32]
 8001284:	b90b      	cbnz	r3, 800128a <__swbuf_r+0x12>
 8001286:	f7ff fa75 	bl	8000774 <__sinit>
 800128a:	69a3      	ldr	r3, [r4, #24]
 800128c:	60a3      	str	r3, [r4, #8]
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	071a      	lsls	r2, r3, #28
 8001292:	d525      	bpl.n	80012e0 <__swbuf_r+0x68>
 8001294:	6923      	ldr	r3, [r4, #16]
 8001296:	b31b      	cbz	r3, 80012e0 <__swbuf_r+0x68>
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	6922      	ldr	r2, [r4, #16]
 800129c:	1a98      	subs	r0, r3, r2
 800129e:	6963      	ldr	r3, [r4, #20]
 80012a0:	b2f6      	uxtb	r6, r6
 80012a2:	4283      	cmp	r3, r0
 80012a4:	4637      	mov	r7, r6
 80012a6:	dc04      	bgt.n	80012b2 <__swbuf_r+0x3a>
 80012a8:	4621      	mov	r1, r4
 80012aa:	4628      	mov	r0, r5
 80012ac:	f7ff ffbc 	bl	8001228 <_fflush_r>
 80012b0:	b9e0      	cbnz	r0, 80012ec <__swbuf_r+0x74>
 80012b2:	68a3      	ldr	r3, [r4, #8]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	60a3      	str	r3, [r4, #8]
 80012b8:	6823      	ldr	r3, [r4, #0]
 80012ba:	1c5a      	adds	r2, r3, #1
 80012bc:	6022      	str	r2, [r4, #0]
 80012be:	701e      	strb	r6, [r3, #0]
 80012c0:	6962      	ldr	r2, [r4, #20]
 80012c2:	1c43      	adds	r3, r0, #1
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d004      	beq.n	80012d2 <__swbuf_r+0x5a>
 80012c8:	89a3      	ldrh	r3, [r4, #12]
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	d506      	bpl.n	80012dc <__swbuf_r+0x64>
 80012ce:	2e0a      	cmp	r6, #10
 80012d0:	d104      	bne.n	80012dc <__swbuf_r+0x64>
 80012d2:	4621      	mov	r1, r4
 80012d4:	4628      	mov	r0, r5
 80012d6:	f7ff ffa7 	bl	8001228 <_fflush_r>
 80012da:	b938      	cbnz	r0, 80012ec <__swbuf_r+0x74>
 80012dc:	4638      	mov	r0, r7
 80012de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012e0:	4621      	mov	r1, r4
 80012e2:	4628      	mov	r0, r5
 80012e4:	f000 f806 	bl	80012f4 <__swsetup_r>
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d0d5      	beq.n	8001298 <__swbuf_r+0x20>
 80012ec:	f04f 37ff 	mov.w	r7, #4294967295
 80012f0:	e7f4      	b.n	80012dc <__swbuf_r+0x64>
	...

080012f4 <__swsetup_r>:
 80012f4:	b538      	push	{r3, r4, r5, lr}
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <__swsetup_r+0xac>)
 80012f8:	4605      	mov	r5, r0
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	460c      	mov	r4, r1
 80012fe:	b118      	cbz	r0, 8001308 <__swsetup_r+0x14>
 8001300:	6a03      	ldr	r3, [r0, #32]
 8001302:	b90b      	cbnz	r3, 8001308 <__swsetup_r+0x14>
 8001304:	f7ff fa36 	bl	8000774 <__sinit>
 8001308:	89a3      	ldrh	r3, [r4, #12]
 800130a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800130e:	0718      	lsls	r0, r3, #28
 8001310:	d422      	bmi.n	8001358 <__swsetup_r+0x64>
 8001312:	06d9      	lsls	r1, r3, #27
 8001314:	d407      	bmi.n	8001326 <__swsetup_r+0x32>
 8001316:	2309      	movs	r3, #9
 8001318:	602b      	str	r3, [r5, #0]
 800131a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800131e:	81a3      	strh	r3, [r4, #12]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	e034      	b.n	8001390 <__swsetup_r+0x9c>
 8001326:	0758      	lsls	r0, r3, #29
 8001328:	d512      	bpl.n	8001350 <__swsetup_r+0x5c>
 800132a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800132c:	b141      	cbz	r1, 8001340 <__swsetup_r+0x4c>
 800132e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001332:	4299      	cmp	r1, r3
 8001334:	d002      	beq.n	800133c <__swsetup_r+0x48>
 8001336:	4628      	mov	r0, r5
 8001338:	f7ff fb24 	bl	8000984 <_free_r>
 800133c:	2300      	movs	r3, #0
 800133e:	6363      	str	r3, [r4, #52]	; 0x34
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001346:	81a3      	strh	r3, [r4, #12]
 8001348:	2300      	movs	r3, #0
 800134a:	6063      	str	r3, [r4, #4]
 800134c:	6923      	ldr	r3, [r4, #16]
 800134e:	6023      	str	r3, [r4, #0]
 8001350:	89a3      	ldrh	r3, [r4, #12]
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	81a3      	strh	r3, [r4, #12]
 8001358:	6923      	ldr	r3, [r4, #16]
 800135a:	b94b      	cbnz	r3, 8001370 <__swsetup_r+0x7c>
 800135c:	89a3      	ldrh	r3, [r4, #12]
 800135e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001366:	d003      	beq.n	8001370 <__swsetup_r+0x7c>
 8001368:	4621      	mov	r1, r4
 800136a:	4628      	mov	r0, r5
 800136c:	f000 f850 	bl	8001410 <__smakebuf_r>
 8001370:	89a0      	ldrh	r0, [r4, #12]
 8001372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001376:	f010 0301 	ands.w	r3, r0, #1
 800137a:	d00a      	beq.n	8001392 <__swsetup_r+0x9e>
 800137c:	2300      	movs	r3, #0
 800137e:	60a3      	str	r3, [r4, #8]
 8001380:	6963      	ldr	r3, [r4, #20]
 8001382:	425b      	negs	r3, r3
 8001384:	61a3      	str	r3, [r4, #24]
 8001386:	6923      	ldr	r3, [r4, #16]
 8001388:	b943      	cbnz	r3, 800139c <__swsetup_r+0xa8>
 800138a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800138e:	d1c4      	bne.n	800131a <__swsetup_r+0x26>
 8001390:	bd38      	pop	{r3, r4, r5, pc}
 8001392:	0781      	lsls	r1, r0, #30
 8001394:	bf58      	it	pl
 8001396:	6963      	ldrpl	r3, [r4, #20]
 8001398:	60a3      	str	r3, [r4, #8]
 800139a:	e7f4      	b.n	8001386 <__swsetup_r+0x92>
 800139c:	2000      	movs	r0, #0
 800139e:	e7f7      	b.n	8001390 <__swsetup_r+0x9c>
 80013a0:	20000058 	.word	0x20000058

080013a4 <_sbrk_r>:
 80013a4:	b538      	push	{r3, r4, r5, lr}
 80013a6:	4d06      	ldr	r5, [pc, #24]	; (80013c0 <_sbrk_r+0x1c>)
 80013a8:	2300      	movs	r3, #0
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	602b      	str	r3, [r5, #0]
 80013b0:	f7ff f8f4 	bl	800059c <_sbrk>
 80013b4:	1c43      	adds	r3, r0, #1
 80013b6:	d102      	bne.n	80013be <_sbrk_r+0x1a>
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	b103      	cbz	r3, 80013be <_sbrk_r+0x1a>
 80013bc:	6023      	str	r3, [r4, #0]
 80013be:	bd38      	pop	{r3, r4, r5, pc}
 80013c0:	200001bc 	.word	0x200001bc

080013c4 <__swhatbuf_r>:
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	460c      	mov	r4, r1
 80013c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013cc:	2900      	cmp	r1, #0
 80013ce:	b096      	sub	sp, #88	; 0x58
 80013d0:	4615      	mov	r5, r2
 80013d2:	461e      	mov	r6, r3
 80013d4:	da0d      	bge.n	80013f2 <__swhatbuf_r+0x2e>
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80013e6:	2340      	movne	r3, #64	; 0x40
 80013e8:	2000      	movs	r0, #0
 80013ea:	6031      	str	r1, [r6, #0]
 80013ec:	602b      	str	r3, [r5, #0]
 80013ee:	b016      	add	sp, #88	; 0x58
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	466a      	mov	r2, sp
 80013f4:	f000 f848 	bl	8001488 <_fstat_r>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	dbec      	blt.n	80013d6 <__swhatbuf_r+0x12>
 80013fc:	9901      	ldr	r1, [sp, #4]
 80013fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001402:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001406:	4259      	negs	r1, r3
 8001408:	4159      	adcs	r1, r3
 800140a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800140e:	e7eb      	b.n	80013e8 <__swhatbuf_r+0x24>

08001410 <__smakebuf_r>:
 8001410:	898b      	ldrh	r3, [r1, #12]
 8001412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001414:	079d      	lsls	r5, r3, #30
 8001416:	4606      	mov	r6, r0
 8001418:	460c      	mov	r4, r1
 800141a:	d507      	bpl.n	800142c <__smakebuf_r+0x1c>
 800141c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	6123      	str	r3, [r4, #16]
 8001424:	2301      	movs	r3, #1
 8001426:	6163      	str	r3, [r4, #20]
 8001428:	b002      	add	sp, #8
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	ab01      	add	r3, sp, #4
 800142e:	466a      	mov	r2, sp
 8001430:	f7ff ffc8 	bl	80013c4 <__swhatbuf_r>
 8001434:	9900      	ldr	r1, [sp, #0]
 8001436:	4605      	mov	r5, r0
 8001438:	4630      	mov	r0, r6
 800143a:	f7ff fb0f 	bl	8000a5c <_malloc_r>
 800143e:	b948      	cbnz	r0, 8001454 <__smakebuf_r+0x44>
 8001440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001444:	059a      	lsls	r2, r3, #22
 8001446:	d4ef      	bmi.n	8001428 <__smakebuf_r+0x18>
 8001448:	f023 0303 	bic.w	r3, r3, #3
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	81a3      	strh	r3, [r4, #12]
 8001452:	e7e3      	b.n	800141c <__smakebuf_r+0xc>
 8001454:	89a3      	ldrh	r3, [r4, #12]
 8001456:	6020      	str	r0, [r4, #0]
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	81a3      	strh	r3, [r4, #12]
 800145e:	9b00      	ldr	r3, [sp, #0]
 8001460:	6163      	str	r3, [r4, #20]
 8001462:	9b01      	ldr	r3, [sp, #4]
 8001464:	6120      	str	r0, [r4, #16]
 8001466:	b15b      	cbz	r3, 8001480 <__smakebuf_r+0x70>
 8001468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800146c:	4630      	mov	r0, r6
 800146e:	f000 f81d 	bl	80014ac <_isatty_r>
 8001472:	b128      	cbz	r0, 8001480 <__smakebuf_r+0x70>
 8001474:	89a3      	ldrh	r3, [r4, #12]
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	431d      	orrs	r5, r3
 8001484:	81a5      	strh	r5, [r4, #12]
 8001486:	e7cf      	b.n	8001428 <__smakebuf_r+0x18>

08001488 <_fstat_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d07      	ldr	r5, [pc, #28]	; (80014a8 <_fstat_r+0x20>)
 800148c:	2300      	movs	r3, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	602b      	str	r3, [r5, #0]
 8001496:	f7ff f858 	bl	800054a <_fstat>
 800149a:	1c43      	adds	r3, r0, #1
 800149c:	d102      	bne.n	80014a4 <_fstat_r+0x1c>
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	b103      	cbz	r3, 80014a4 <_fstat_r+0x1c>
 80014a2:	6023      	str	r3, [r4, #0]
 80014a4:	bd38      	pop	{r3, r4, r5, pc}
 80014a6:	bf00      	nop
 80014a8:	200001bc 	.word	0x200001bc

080014ac <_isatty_r>:
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4d06      	ldr	r5, [pc, #24]	; (80014c8 <_isatty_r+0x1c>)
 80014b0:	2300      	movs	r3, #0
 80014b2:	4604      	mov	r4, r0
 80014b4:	4608      	mov	r0, r1
 80014b6:	602b      	str	r3, [r5, #0]
 80014b8:	f7ff f857 	bl	800056a <_isatty>
 80014bc:	1c43      	adds	r3, r0, #1
 80014be:	d102      	bne.n	80014c6 <_isatty_r+0x1a>
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	b103      	cbz	r3, 80014c6 <_isatty_r+0x1a>
 80014c4:	6023      	str	r3, [r4, #0]
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
 80014c8:	200001bc 	.word	0x200001bc

080014cc <_init>:
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	bf00      	nop
 80014d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014d2:	bc08      	pop	{r3}
 80014d4:	469e      	mov	lr, r3
 80014d6:	4770      	bx	lr

080014d8 <_fini>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr
